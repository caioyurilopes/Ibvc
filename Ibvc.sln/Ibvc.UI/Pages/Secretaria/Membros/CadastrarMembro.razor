@page "/secretaria/membros/cadastrar"
@layout MainLayout

@inject IMembrosService MembrosService
@inject ICepService CepService

<PageTitle>Cadastrar novo membro</PageTitle>

<div class="max-w-3xl mx-auto bg-zinc-900 p-4 rounded-xl shadow space-y-6">
    <h2 class="text-xl font-semibold text-white">Dados pessoais</h2>
    <div class="grid md:grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-medium text-zinc-300">Nome completo:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.NomeCompleto" type="text"
                       placeholder="Ex: José Pedro"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">CPF:</label>
            <input id="cpfCadastroMembro"
                   maxlength="18"
                   type="text"
                   placeholder="999.999.999-99"
                   class="@Classes.InputCadastroMembro"
                   value="@_cpfMascara"
                   @oninput="@OnCpfInput"
            />
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Telefone:</label>
            <input id="telefoneCadastroMembro"
                   maxlength="16"
                   type="tel"
                   placeholder="(99) 9 9999-9999"
                   class="@Classes.InputCadastroMembro"
                   value="@_telefoneMascara"
                   @oninput="@OnTelefoneInput"
            />
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Data de nascimento:</label>
            <InputDate class="@Classes.InputCadastroMembro" @bind-Value="usuario.DataNascimento"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Gênero:</label>
            <InputSelect class="@Classes.InputCadastroMembro" @bind-Value="usuario.Genero">
                <option disabled selected>Selecione</option>
                @foreach (var genero in Enum.GetValues<Genero>())
                {
                    <option value="@genero">@genero</option>
                }
            </InputSelect>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Meio admissão</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.MeioAdmissao" type="text"
                       placeholder="Ex: Aplicativo"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Naturalidade</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Naturalidade" type="text"
                       placeholder="Ex: Brasileiro"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Estado Civil:</label>
            <InputSelect class="@Classes.InputCadastroMembro" @bind-Value="usuario.EstadoCivil"
                         @onchange="HandleEstadoCivilChange">
                <option disabled selected>Selecione</option>
                @foreach (var estado in Enum.GetValues<EstadoCivil>())
                {
                    <option value="@estado">@estado.ToDisplay()</option>
                }
            </InputSelect>
        </div>
    </div>

    @if (usuario.EstadoCivil == EstadoCivil.Casado || usuario.EstadoCivil == EstadoCivil.UniaoEstavel)
    {
        <h2 class="text-xl font-semibold text-white pt-6">Cônjuge</h2>
        <div class="grid md:grid-cols-2 gap-4">
            <div>
                <label class="block text-sm font-medium text-zinc-300">Selecionar membro existente (opcional):</label>
                <InputSelect class="@Classes.InputCadastroMembro" @bind-Value="usuario.ConjugeId">
                    <option value=""></option>
                    @if (membros != null)
                    {
                        foreach (var membro in membros)
                        {
                            <option value="@membro.Id">@membro.Nome</option>
                        }
                    }
                </InputSelect>
            </div>
            <div>
                <label class="block text-sm font-medium text-zinc-300">Nome do conjugê (manual):</label>
                <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.NomeConjuge" type="text"
                           placeholder="Ex: Maria Silva"/>
            </div>
            <div>
                <label class="block text-sm font-medium text-zinc-300">Data de casamento:</label>
                <InputDate class="@Classes.InputCadastroMembro" @bind-Value="usuario.DataCasamento"/>
            </div>
        </div>
    }

    <h2 class="text-xl font-semibold text-white pt-6">Endereço</h2>
    <div class="grid md:grid-cols-3 gap-4">
        <div>
            <label class="block text-sm font-medium text-zinc-300">CEP:</label>
            <input id="cepCadastroMembro"
                   maxlength="9"
                   type="text"
                   placeholder="99999-999"
                   class="@Classes.InputCadastroMembro"
                   value="@_cepMascara"
                   @oninput="@(e => OnCepInput(e))"
            />
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Estado:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Estado" type="text"
                       placeholder="Ex: Rio Grande do Sul"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">UF:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Uf" type="text" placeholder="Ex: RS"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Bairro:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Bairro" type="text"
                       placeholder="Ex: Santo Antônio"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Logradouro:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Logradouro" type="text"
                       placeholder="Ex: Santa Cruz do Sul"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Número:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Numero" type="number"
                       placeholder="697"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Complemento:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Complemento" type="text"
                       placeholder="Ex: Em fronte a ..."/>
        </div>
    </div>

    <h2 class="text-xl font-semibold text-white pt-6">Batismo</h2>
    <div class="grid md:grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-medium text-zinc-300">Data de batismo:</label>
            <InputDate class="@Classes.InputCadastroMembro" @bind-Value="usuario.Batismo!.Data"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Pastor batizando:</label>
            <div class="flex items-center gap-2 mb-1">
                <label class="text-sm text-zinc-300">Informar manualmente</label>
                <CheckBox @bind-Value="_informarPastorBatismo"/>
            </div>

            @if (!_informarPastorBatismo)
            {
                <InputSelect class="@Classes.InputCadastroMembro" @bind-Value="usuario.Batismo.PastorId">
                    <option value="">Selecione um membro</option>
                    @if (membros is not null)
                        foreach (var membro in membros)
                        {
                            <option value="@membro.Id">@membro.Nome</option>
                        }
                </InputSelect>
            }
            else
            {
                <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Batismo.PastorNomeManual"
                           type="text" placeholder="Ex: Pastor João da Silva"/>
            }
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Igreja de batismo:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Batismo.Igreja" type="text"
                       placeholder="Ex: Igreja Batista ..."/>
        </div>
    </div>

    <h2 class="text-xl font-semibold text-white pt-6">Profissão de Fé</h2>
    <div class="grid md:grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-medium text-zinc-300">Data de profissão de fé:</label>
            <InputDate class="@Classes.InputCadastroMembro" @bind-Value="usuario.ProfissaoDeFe!.Data"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Pastor que realizou a profissão:</label>
            <div class="flex items-center gap-2 mb-1">
                <label class="text-sm text-zinc-300">Informar manualmente</label>
                <CheckBox @bind-Value="_informarPastorProfissao"/>
            </div>

            @if (!_informarPastorProfissao)
            {
                <InputSelect class="@Classes.InputCadastroMembro" @bind-Value="usuario.ProfissaoDeFe.PastorId">
                    <option value="">Selecione um membro</option>
                    @if (membros is not null)
                        @foreach (var membro in membros)
                    {
                        <option value="@membro.Id">@membro.Nome</option>
                    }
                </InputSelect>
            }
            else
            {
                <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.Batismo.PastorNomeManual"
                           type="text" placeholder="Ex: Pastor João da Silva"/>
            }
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Igreja da profissão:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.ProfissaoDeFe.Igreja" type="text"
                       placeholder="Ex: Igreja Batista ..."/>
        </div>
    </div>

    <h2 class="text-xl font-semibold text-white pt-6">Informações familiares</h2>
    <div class="grid md:grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-medium text-zinc-300">Nome do pai:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.NomePai" type="text"
                       placeholder="Ex: João da Silva"/>
        </div>
        <div>
            <label class="block text-sm font-medium text-zinc-300">Nome da mãe:</label>
            <InputText class="@Classes.InputCadastroMembro" @bind-Value="usuario.NomeMae" type="text"
                       placeholder="Ex: Maria Silva"/>
        </div>
    </div>

    <div class="pt-6">
        <button class="w-full bg-yellow-500 text-black font-semibold py-2 rounded-xl hover:bg-yellow-400 transition"
                @onclick="Cadastrar">
            Salvar Membro
        </button>
    </div>

    <Modal @ref="_modalCepErro"
           Title="CEP não encontrado"
           Message="Não encontramos esse CEP, por favor, verifique ou escreva os dados normalmente."
           IsError="false" OnClose="CloseCepModal"
    />

    <Modal @ref="_modalCadastroMembro"
           Title="Membro cadastrado com sucesso"
           Message="Esse novo membro foi cadastrado com sucesso!"
           IsError="false" OnClose="CloseCadastroMembroModal"/>
</div>

@code {

    private readonly Usuario usuario = new()
    {
        TipoUsuario = TipoUsuario.Membro,
        DataNascimento = DateTime.Today,
        DataCasamento = DateTime.Today,
        DataAdmissao = DateTime.Today,
        Batismo = new Batismo
        {
            Data = DateTime.Today
        },
        ProfissaoDeFe = new ProfissaoDeFe
        {
            Data = DateTime.Today
        }
    };

    private string _telefoneMascara = string.Empty;
    private string _cepMascara = string.Empty;
    private string _cpfMascara = string.Empty;
    private bool _informarPastorBatismo = false;
    private bool _informarPastorProfissao = false;
    private Modal? _modalCepErro;
    private Modal? _modalCadastroMembro;
    private List<NomesMembrosResponse>? membros = new();

    protected override async Task OnInitializedAsync()
    {
        membros = await MembrosService.GetAllNomesMembrosAsync();
    }

    private async Task Cadastrar()
    {
        try
        {
            CadastrarMembroRequest request = new CadastrarMembroRequest
            {
                NomeCompleto = usuario.NomeCompleto,
                Cpf = usuario.Cpf,
                Cep = usuario.Cep,
                Logradouro = usuario.Logradouro,
                Complemento = usuario.Complemento,
                Bairro = usuario.Bairro,
                Uf = usuario.Uf,
                Estado = usuario.Estado,
                Numero = usuario.Numero,
                Telefone = usuario.Telefone,
                DataNascimento = usuario.DataNascimento,
                Naturalidade = usuario.Naturalidade,
                Genero = usuario.Genero,
                EstadoCivil = usuario.EstadoCivil,
                TipoUsuario = usuario.TipoUsuario,

                ConjugeId = usuario.ConjugeId,
                NomeConjuge = usuario.NomeConjuge,
                DataCasamento = usuario.DataCasamento,

                NomePai = usuario.NomePai,
                NomeMae = usuario.NomeMae,

                DataBatismo = usuario.Batismo?.Data,
                IgrejaBatismo = usuario.Batismo?.Igreja,
                PastorBatismoId = usuario.Batismo?.PastorId,
                PastorBatismoNomeManual = usuario.Batismo?.PastorNomeManual,

                DataProfissaoFe = usuario.ProfissaoDeFe?.Data,
                IgrejaProfissaoFe = usuario.ProfissaoDeFe?.Igreja,
                PastorProfissaoFeId = usuario.ProfissaoDeFe?.PastorId,
                PastorProfissaoFeNomeManual = usuario.ProfissaoDeFe?.PastorNomeManual,

                DataAdmissao = usuario.DataAdmissao,
                MeioAdmissao = usuario.MeioAdmissao,

                Celular = usuario.Celular,
                Senha = usuario.Senha
            };

            await MembrosService.CadastrarMembroAsync(request);
            _modalCadastroMembro?.SetShowAsync(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cadastrar membro: {ex.Message}");
        }
    }
    
    private void OnTelefoneInput(ChangeEventArgs e)
    {
        string valor = e.Value?.ToString() ?? "";
        _telefoneMascara = CelularFormatter.AplicarMascara(valor);
        usuario.Telefone = CelularFormatter.RemoverMascara(valor);
    }

    private void OnCpfInput(ChangeEventArgs e)
    {
        string valor = e.Value?.ToString() ?? "";
        _cpfMascara = CpfCnpjFormatter.AplicarMascara(valor);
        usuario.Cpf = CpfCnpjFormatter.RemoverMascara(valor);
    }

    private async Task OnCepInput(ChangeEventArgs e)
    {
        string valor = e.Value?.ToString() ?? "";
        _cepMascara = CepFormatter.AplicarMascara(valor);
        usuario.Cep = CepFormatter.RemoverMascara(valor);

        if (usuario.Cep.Length >= 8)
        {
            CepResponse? endereco = await CepService.GetEnderecoByCepAsync(usuario.Cep);
            if (endereco is not null)
            {
                usuario.Logradouro = endereco.Logradouro ?? "";
                usuario.Bairro = endereco.Bairro ?? "";
                usuario.Estado = endereco.Localidade ?? "";
                usuario.Uf = endereco.Uf ?? "";
                usuario.Complemento = endereco.Complemento ?? "";
            }
            else if (_modalCepErro is not null)
                await _modalCepErro.SetShowAsync(true);
        }
    }

    private void HandleEstadoCivilChange(ChangeEventArgs e)
    {
        if (Enum.TryParse<EstadoCivil>(e.Value?.ToString(), out var estadoCivil))
        {
            usuario.EstadoCivil = estadoCivil;
        }
    }

    private void CloseCepModal()
    {
        _cepMascara = string.Empty;
        usuario.Cep = string.Empty;
        usuario.Estado = string.Empty;
        usuario.Uf = string.Empty;
        usuario.Bairro = string.Empty;
        usuario.Logradouro = string.Empty;
        usuario.Numero = string.Empty;
        usuario.Complemento = string.Empty;
    }

    private void CloseCadastroMembroModal()
    {
        usuario.NomeCompleto = string.Empty;
        usuario.Cpf = string.Empty;
        usuario.Cep = string.Empty;
        usuario.Logradouro = string.Empty;
        usuario.Complemento = string.Empty;
        usuario.Bairro = string.Empty;
        usuario.Uf = string.Empty;
        usuario.Estado = string.Empty;
        usuario.Numero = string.Empty;
        usuario.Telefone = string.Empty;
        usuario.DataNascimento = DateTime.Today;
        usuario.Naturalidade = string.Empty;
        usuario.Genero = default;
        usuario.EstadoCivil = default;
        usuario.TipoUsuario = TipoUsuario.Membro;
        usuario.ConjugeId = null;
        usuario.NomeConjuge = string.Empty;
        usuario.DataCasamento = DateTime.Today;
        usuario.NomePai = string.Empty;
        usuario.NomeMae = string.Empty;
        usuario.DataAdmissao = DateTime.Today;
        usuario.MeioAdmissao = string.Empty;
        usuario.Celular = string.Empty;
        usuario.Senha = string.Empty;
        usuario.Batismo = new Batismo
        {
            Data = DateTime.Today,
            Igreja = string.Empty,
            PastorId = null,
            PastorNomeManual = string.Empty
        };
        usuario.ProfissaoDeFe = new ProfissaoDeFe
        {
            Data = DateTime.Today,
            Igreja = string.Empty,
            PastorId = null,
            PastorNomeManual = string.Empty
        };
        _cpfMascara = string.Empty;
        _telefoneMascara = string.Empty;
        _cepMascara = string.Empty;
        _informarPastorBatismo = false;
        _informarPastorProfissao = false;
    }

}